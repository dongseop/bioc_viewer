{
version: 3,
sources: [
"toastr.js"
],
names: [
"define",
"$",
"error",
"message",
"title",
"optionsOverride",
"notify",
"type",
"toastType",
"iconClass",
"getOptions",
"iconClasses",
"getContainer",
"options",
"create",
"$container",
"containerId",
"length",
"createContainer",
"info",
"subscribe",
"callback",
"listener",
"success",
"warning",
"clear",
"$toastElement",
"clearOptions",
"clearToast",
"clearContainer",
"remove",
"removeToast",
"children",
"toastsToClear",
"i",
"force",
"hideMethod",
"duration",
"hideDuration",
"easing",
"hideEasing",
"complete",
"attr",
"addClass",
"positionClass",
"appendTo",
"target",
"getDefaults",
"tapToDismiss",
"toastClass",
"debug",
"showMethod",
"showDuration",
"showEasing",
"onShown",
"undefined",
"onHidden",
"extendedTimeOut",
"timeOut",
"titleClass",
"messageClass",
"closeHtml",
"newestOnTop",
"preventDuplicates",
"progressBar",
"publish",
"args",
"map",
"personalizeToast",
"setIcon",
"setTitle",
"setMessage",
"setCloseButton",
"setProgressBar",
"setSequence",
"handleEvents",
"hover",
"stickAround",
"delayedHideToast",
"onclick",
"click",
"hideToast",
"closeButton",
"$closeElement",
"event",
"stopPropagation",
"cancelBubble",
"displayToast",
"hide",
"intervalId",
"setTimeout",
"maxHideTime",
"parseFloat",
"hideEta",
"Date",
"getTime",
"setInterval",
"updateProgress",
"prepend",
"append",
"$titleElement",
"$messageElement",
"$progressElement",
"shouldExit",
"previousToast",
"override",
"clearTimeout",
"response",
"state",
"endTime",
"stop",
"percentage",
"width",
"extend",
"toastId",
"startTime",
"console",
"log",
"toastr",
"is",
"version",
"amd",
"deps",
"factory",
"module",
"exports",
"require",
"window"
],
mappings: "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",
file: "toastr.js",
sourcesContent: [
"/* * Toastr * Copyright 2012-2015 * Authors: John Papa, Hans FjÃ¤llemark, and Tim Ferrell. * All Rights Reserved. * Use, reproduction, distribution, and modification of this code is subject to the terms and * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php * * ARIA Support: Greta Krafsig * * Project: https://github.com/CodeSeven/toastr */ /* global define */ ; (function (define) { define(['jquery'], function ($) { return (function () { var $container; var listener; var toastId = 0; var toastType = { error: 'error', info: 'info', success: 'success', warning: 'warning' }; var toastr = { clear: clear, remove: remove, error: error, getContainer: getContainer, info: info, options: {}, subscribe: subscribe, success: success, version: '2.1.1', warning: warning }; var previousToast; return toastr; //////////////// function error(message, title, optionsOverride) { return notify({ type: toastType.error, iconClass: getOptions().iconClasses.error, message: message, optionsOverride: optionsOverride, title: title }); } function getContainer(options, create) { if (!options) { options = getOptions(); } $container = $('#' + options.containerId); if ($container.length) { return $container; } if (create) { $container = createContainer(options); } return $container; } function info(message, title, optionsOverride) { return notify({ type: toastType.info, iconClass: getOptions().iconClasses.info, message: message, optionsOverride: optionsOverride, title: title }); } function subscribe(callback) { listener = callback; } function success(message, title, optionsOverride) { return notify({ type: toastType.success, iconClass: getOptions().iconClasses.success, message: message, optionsOverride: optionsOverride, title: title }); } function warning(message, title, optionsOverride) { return notify({ type: toastType.warning, iconClass: getOptions().iconClasses.warning, message: message, optionsOverride: optionsOverride, title: title }); } function clear($toastElement, clearOptions) { var options = getOptions(); if (!$container) { getContainer(options); } if (!clearToast($toastElement, options, clearOptions)) { clearContainer(options); } } function remove($toastElement) { var options = getOptions(); if (!$container) { getContainer(options); } if ($toastElement && $(':focus', $toastElement).length === 0) { removeToast($toastElement); return; } if ($container.children().length) { $container.remove(); } } // internal functions function clearContainer (options) { var toastsToClear = $container.children(); for (var i = toastsToClear.length - 1; i >= 0; i--) { clearToast($(toastsToClear[i]), options); } } function clearToast ($toastElement, options, clearOptions) { var force = clearOptions && clearOptions.force ? clearOptions.force : false; if ($toastElement && (force || $(':focus', $toastElement).length === 0)) { $toastElement[options.hideMethod]({ duration: options.hideDuration, easing: options.hideEasing, complete: function () { removeToast($toastElement); } }); return true; } return false; } function createContainer(options) { $container = $('<div/>') .attr('id', options.containerId) .addClass(options.positionClass) .attr('aria-live', 'polite') .attr('role', 'alert'); $container.appendTo($(options.target)); return $container; } function getDefaults() { return { tapToDismiss: true, toastClass: 'toast', containerId: 'toast-container', debug: false, showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery showDuration: 300, showEasing: 'swing', //swing and linear are built into jQuery onShown: undefined, hideMethod: 'fadeOut', hideDuration: 1000, hideEasing: 'swing', onHidden: undefined, extendedTimeOut: 1000, iconClasses: { error: 'toast-error', info: 'toast-info', success: 'toast-success', warning: 'toast-warning' }, iconClass: 'toast-info', positionClass: 'toast-top-right', timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky titleClass: 'toast-title', messageClass: 'toast-message', target: 'body', closeHtml: '<button type="button">&times;</button>', newestOnTop: true, preventDuplicates: false, progressBar: false }; } function publish(args) { if (!listener) { return; } listener(args); } function notify(map) { var options = getOptions(); var iconClass = map.iconClass || options.iconClass; if (typeof (map.optionsOverride) !== 'undefined') { options = $.extend(options, map.optionsOverride); iconClass = map.optionsOverride.iconClass || iconClass; } if (shouldExit(options, map)) { return; } toastId++; $container = getContainer(options, true); var intervalId = null; var $toastElement = $('<div/>'); var $titleElement = $('<div/>'); var $messageElement = $('<div/>'); var $progressElement = $('<div/>'); var $closeElement = $(options.closeHtml); var progressBar = { intervalId: null, hideEta: null, maxHideTime: null }; var response = { toastId: toastId, state: 'visible', startTime: new Date(), options: options, map: map }; personalizeToast(); displayToast(); handleEvents(); publish(response); if (options.debug && console) { console.log(response); } return $toastElement; function personalizeToast() { setIcon(); setTitle(); setMessage(); setCloseButton(); setProgressBar(); setSequence(); } function handleEvents() { $toastElement.hover(stickAround, delayedHideToast); if (!options.onclick && options.tapToDismiss) { $toastElement.click(hideToast); } if (options.closeButton && $closeElement) { $closeElement.click(function (event) { if (event.stopPropagation) { event.stopPropagation(); } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) { event.cancelBubble = true; } hideToast(true); }); } if (options.onclick) { $toastElement.click(function () { options.onclick(); hideToast(); }); } } function displayToast() { $toastElement.hide(); $toastElement[options.showMethod]( {duration: options.showDuration, easing: options.showEasing, complete: options.onShown} ); if (options.timeOut > 0) { intervalId = setTimeout(hideToast, options.timeOut); progressBar.maxHideTime = parseFloat(options.timeOut); progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime; if (options.progressBar) { progressBar.intervalId = setInterval(updateProgress, 10); } } } function setIcon() { if (map.iconClass) { $toastElement.addClass(options.toastClass).addClass(iconClass); } } function setSequence() { if (options.newestOnTop) { $container.prepend($toastElement); } else { $container.append($toastElement); } } function setTitle() { if (map.title) { $titleElement.append(map.title).addClass(options.titleClass); $toastElement.append($titleElement); } } function setMessage() { if (map.message) { $messageElement.append(map.message).addClass(options.messageClass); $toastElement.append($messageElement); } } function setCloseButton() { if (options.closeButton) { $closeElement.addClass('toast-close-button').attr('role', 'button'); $toastElement.prepend($closeElement); } } function setProgressBar() { if (options.progressBar) { $progressElement.addClass('toast-progress'); $toastElement.prepend($progressElement); } } function shouldExit(options, map) { if (options.preventDuplicates) { if (map.message === previousToast) { return true; } else { previousToast = map.message; } } return false; } function hideToast(override) { if ($(':focus', $toastElement).length && !override) { return; } clearTimeout(progressBar.intervalId); return $toastElement[options.hideMethod]({ duration: options.hideDuration, easing: options.hideEasing, complete: function () { removeToast($toastElement); if (options.onHidden && response.state !== 'hidden') { options.onHidden(); } response.state = 'hidden'; response.endTime = new Date(); publish(response); } }); } function delayedHideToast() { if (options.timeOut > 0 || options.extendedTimeOut > 0) { intervalId = setTimeout(hideToast, options.extendedTimeOut); progressBar.maxHideTime = parseFloat(options.extendedTimeOut); progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime; } } function stickAround() { clearTimeout(intervalId); progressBar.hideEta = 0; $toastElement.stop(true, true)[options.showMethod]( {duration: options.showDuration, easing: options.showEasing} ); } function updateProgress() { var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100; $progressElement.width(percentage + '%'); } } function getOptions() { return $.extend({}, getDefaults(), toastr.options); } function removeToast($toastElement) { if (!$container) { $container = getContainer(); } if ($toastElement.is(':visible')) { return; } $toastElement.remove(); $toastElement = null; if ($container.children().length === 0) { $container.remove(); previousToast = undefined; } } })(); }); }(typeof define === 'function' && define.amd ? define : function (deps, factory) { if (typeof module !== 'undefined' && module.exports) { //Node module.exports = factory(require('jquery')); } else { window['toastr'] = factory(window['jQuery']); } })); "
],
sourceRoot: "/source/"
}